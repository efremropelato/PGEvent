DROP TRIGGER IF EXISTS TBLEXAMPLE_AFTER ON TBLEXAMPLE;
DROP FUNCTION IF EXISTS NOTIFY();
DROP TABLE IF EXISTS PUBLIC.TBLEXAMPLE;

CREATE TABLE PUBLIC.TBLEXAMPLE
(
    KEY1 CHARACTER VARYING(10) NOT NULL,
    KEY2 CHARACTER VARYING(14) NOT NULL,
    VALUE1 CHARACTER VARYING(20),
    VALUE2 CHARACTER VARYING(20) NOT NULL,
    CONSTRAINT TBLEXAMPLE_PKEY PRIMARY KEY (KEY1, KEY2)
);


CREATE FUNCTION NOTIFY() RETURNS TRIGGER
    LANGUAGE PLPGSQL
AS
$$
BEGIN
    IF(TG_OP = 'DELETE') THEN
        PERFORM PG_NOTIFY('myEvent', ROW_TO_JSON(OLD)::TEXT || ' - ' || TG_OP::TEXT);
        RETURN NEW;
    ELSE
        PERFORM PG_NOTIFY('myEvent', ROW_TO_JSON(NEW)::TEXT || ' - ' || TG_OP::TEXT);
        RETURN NEW;
    END IF;
END;
$$;

ALTER FUNCTION NOTIFY() OWNER TO POSTGRES;

CREATE TRIGGER TBLEXAMPLE_AFTER
    AFTER INSERT OR UPDATE OR DELETE
    ON TBLEXAMPLE
    FOR EACH ROW
EXECUTE PROCEDURE NOTIFY();